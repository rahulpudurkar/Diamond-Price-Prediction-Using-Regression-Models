{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1fa08e48",
   "metadata": {},
   "source": [
    "### Part 1 - Get Data and Pre-Process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "1279b7d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generic inputs for most ML tasks\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "import plotly.offline as pyo\n",
    "\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "\n",
    "# setup interactive notebook mode\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "\n",
    "from IPython.display import display, HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "40224275",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rownames</th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.23</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.50</td>\n",
       "      <td>55.00</td>\n",
       "      <td>326</td>\n",
       "      <td>3.95</td>\n",
       "      <td>3.98</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.21</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI1</td>\n",
       "      <td>59.80</td>\n",
       "      <td>61.00</td>\n",
       "      <td>326</td>\n",
       "      <td>3.89</td>\n",
       "      <td>3.84</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.23</td>\n",
       "      <td>Good</td>\n",
       "      <td>E</td>\n",
       "      <td>VS1</td>\n",
       "      <td>56.90</td>\n",
       "      <td>65.00</td>\n",
       "      <td>327</td>\n",
       "      <td>4.05</td>\n",
       "      <td>4.07</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.29</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>334</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4.23</td>\n",
       "      <td>2.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.31</td>\n",
       "      <td>Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.30</td>\n",
       "      <td>58.00</td>\n",
       "      <td>335</td>\n",
       "      <td>4.34</td>\n",
       "      <td>4.35</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rownames  carat      cut color clarity  depth  table  price    x    y    z\n",
       "0         1   0.23    Ideal     E     SI2  61.50  55.00    326 3.95 3.98 2.43\n",
       "1         2   0.21  Premium     E     SI1  59.80  61.00    326 3.89 3.84 2.31\n",
       "2         3   0.23     Good     E     VS1  56.90  65.00    327 4.05 4.07 2.31\n",
       "3         4   0.29  Premium     I     VS2  62.40  58.00    334 4.20 4.23 2.63\n",
       "4         5   0.31     Good     J     SI2  63.30  58.00    335 4.34 4.35 2.75"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fetch data \n",
    "diamonds_data = pd.read_csv('./diamonds.csv')\n",
    "\n",
    "diamonds_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "687b5ae2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the column ‘rownames’ as it is simply an index of the diamonds.\n",
    "diamonds_data.drop(columns = ['rownames'], inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "514b98c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.50</td>\n",
       "      <td>55.00</td>\n",
       "      <td>326</td>\n",
       "      <td>3.95</td>\n",
       "      <td>3.98</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.21</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI1</td>\n",
       "      <td>59.80</td>\n",
       "      <td>61.00</td>\n",
       "      <td>326</td>\n",
       "      <td>3.89</td>\n",
       "      <td>3.84</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Good</td>\n",
       "      <td>E</td>\n",
       "      <td>VS1</td>\n",
       "      <td>56.90</td>\n",
       "      <td>65.00</td>\n",
       "      <td>327</td>\n",
       "      <td>4.05</td>\n",
       "      <td>4.07</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.29</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>334</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4.23</td>\n",
       "      <td>2.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.31</td>\n",
       "      <td>Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.30</td>\n",
       "      <td>58.00</td>\n",
       "      <td>335</td>\n",
       "      <td>4.34</td>\n",
       "      <td>4.35</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   carat      cut color clarity  depth  table  price    x    y    z\n",
       "0   0.23    Ideal     E     SI2  61.50  55.00    326 3.95 3.98 2.43\n",
       "1   0.21  Premium     E     SI1  59.80  61.00    326 3.89 3.84 2.31\n",
       "2   0.23     Good     E     VS1  56.90  65.00    327 4.05 4.07 2.31\n",
       "3   0.29  Premium     I     VS2  62.40  58.00    334 4.20 4.23 2.63\n",
       "4   0.31     Good     J     SI2  63.30  58.00    335 4.34 4.35 2.75"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diamonds_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "4d542fea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "carat      0\n",
       "cut        0\n",
       "color      0\n",
       "clarity    0\n",
       "depth      0\n",
       "table      0\n",
       "price      0\n",
       "x          0\n",
       "y          0\n",
       "z          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if there are any NaN values: No NaN Values in any of the columns\n",
    "diamonds_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "b60a19e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(53940, 10)"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How many rows of data (n) are in the data frame : Total number of rows = 53490\n",
    "# .shape returns a tuple with number of rows and columns respectively\n",
    "diamonds_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "f7c6aa37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Good', 'Very Good', 'Premium', 'Ideal', 'Fair'}\n",
      "{'G', 'J', 'I', 'E', 'F', 'D', 'H'}\n",
      "{'VS2', 'I1', 'VVS2', 'SI1', 'VVS1', 'VS1', 'IF', 'SI2'}\n"
     ]
    }
   ],
   "source": [
    "# All sets of values taken by each of the three categorical variables, cut, color and clarity.\n",
    "print(set(diamonds_data['cut']))\n",
    "print(set(diamonds_data['color']))\n",
    "print(set(diamonds_data['clarity']))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dd4b25a",
   "metadata": {},
   "source": [
    "### Part 2 - Simple Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d30bc3a",
   "metadata": {},
   "source": [
    "* Plot a heatmap to find what variable 'price' is most correlated to: price is most correlated to **'carat'** with a value of **0.92**\n",
    "* The heatmap is interactive, allowing us to view the correlation coefficients between each pair of variables by hovering over it. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "77ef3d4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "type": "heatmap",
         "x": [
          "carat",
          "depth",
          "table",
          "price",
          "x",
          "y",
          "z"
         ],
         "y": [
          "carat",
          "depth",
          "table",
          "price",
          "x",
          "y",
          "z"
         ],
         "z": [
          [
           1,
           0.028224314279026518,
           0.18161754651523193,
           0.9215913011934687,
           0.9750942267264254,
           0.9517221990129883,
           0.9533873805614275
          ],
          [
           0.028224314279026518,
           1,
           -0.2957785215265925,
           -0.010647404584155393,
           -0.025289246978973112,
           -0.029340670703632984,
           0.09492388239528399
          ],
          [
           0.18161754651523193,
           -0.2957785215265925,
           1,
           0.1271339021217227,
           0.19534428095550047,
           0.18376014711635102,
           0.15092869156479616
          ],
          [
           0.9215913011934687,
           -0.010647404584155393,
           0.1271339021217227,
           1,
           0.8844351610161171,
           0.8654208978641909,
           0.8612494438514452
          ],
          [
           0.9750942267264254,
           -0.025289246978973112,
           0.19534428095550047,
           0.8844351610161171,
           1,
           0.9747014796703515,
           0.9707717985774582
          ],
          [
           0.9517221990129883,
           -0.029340670703632984,
           0.18376014711635102,
           0.8654208978641909,
           0.9747014796703515,
           1,
           0.9520057161562947
          ],
          [
           0.9533873805614275,
           0.09492388239528399,
           0.15092869156479616,
           0.8612494438514452,
           0.9707717985774582,
           0.9520057161562947,
           1
          ]
         ]
        }
       ],
       "layout": {
        "autosize": true,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Selected Columns Correlation Heatmap"
        },
        "xaxis": {
         "autorange": true,
         "range": [
          -0.5,
          6.5
         ],
         "type": "category"
        },
        "yaxis": {
         "autorange": true,
         "range": [
          -0.5,
          6.5
         ],
         "type": "category"
        }
       }
      },
      "image/png": "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t0ABBAgQIECAAAECBAgQIECAQM0CwpOau6M2AgQIECBAgAABAgQIECBAoLiA8KR4CxRAgAABAgQIECBAgAABAgQI1CwgPKm5O2ojQIAAAQIECBAgQIAAAQIEigsIT4q3QAEECBAgQIAAAQIECBAgQIBAzQLCk5q7ozYCBAgQIECAAAECBAgQIECguIDwpHgLFECAAAECBAgQIECAAAECBAjULCA8qbk7aiNAgAABAgQIECBAgAABAgSKCwhPirdAAQQIECBAgAABAgQIECBAgEDNAsKTmrujNgIECBAgQIAAAQIECBAgQKC4gPCkeAsUQIAAAQIECBAgQIAAAQIECNQsIDypuTtqI0CAAAECBAgQIECAAAECBIoLCE+Kt0ABBAgQIECAAAECBAgQIECAQM0CwpOau6M2AgQIECBAgAABAgQIECBAoLiA8KR4CxRAgAABAgQIECBAgAABAgQI1CwgPKm5O2ojQIAAAQIECBAgQIAAAQIEigsIT4q3QAEECBAgQIAAAQIECBAgQIBAzQLCk5q7ozYCBAgQIECAAAECBAgQIECguIDwpHgLFECAAAECBAgQIECAAAECBAjULCA8qbk7aiNAgAABAgQIECBAgAABAgSKCwhPirdAAQQIECBAgAABAgQIECBAgEDNAsKTmrujNgIECBAgQIAAAQIECBAgQKC4gPCkeAsUQIAAAQIECBAgQIAAAQIECNQsIDypuTtqI0CAAAECBAgQIECAAAECBIoLCE+Kt0ABBAgQIECAAAECBAgQIECAQM0CwpOau6M2AgQIECBAgAABAgQIECBAoLiA8KR4CxRAgAABAgQIECBAgAABAgQI1CwgPKm5O2ojQIAAAQIECBAgQIAAAQIEigsIT4q3QAEECBAgQIAAAQIECBAgQIBAzQLCk5q7ozYCBAgQIECAAAECBAgQIECguIDwpHgLFECAAAECBAgQIECAAAECBAjULCA8qbk7aiNAgAABAgQIECBAgAABAgSKCwhPirdAAQQIECBAgAABAgQIECBAgEDNAsKTmrujNgIECBAgQIAAAQIECBAgQKC4gPCkeAsUQIAAAQIECBAgQIAAAQIECNQsIDypuTtqI0CAAAECBAgQIECAAAECBIoLCE+Kt0ABBAgQIECAAAECBAgQIECAQM0CwpOau6M2AgQIECBAgAABAgQIECBAoLiA8KR4CxRAgAABAgQIECBAgAABAgQI1CwgPKm5O2ojQIAAAQIECBAgQIAAAQIEigsIT4q3QAEECBAgQIAAAQIECBAgQIBAzQLCk5q7ozYCBAgQIECAAAECBAgQIECguIDwpHgLFECAAAECBAgQIECAAAECBAjULCA8qbk7aiNAgAABAgQIECBAgAABAgSKCwhPirdAAQQIECBAgAABAgQIECBAgEDNAsKTmrujNgIECBAgQIAAAQIECBAgQKC4gPCkeAsUQIAAAQIECBAgQIAAAQIECNQsIDypuTtqI0CAAAECBAgQIECAAAECBIoLCE+Kt0ABBAgQIECAAAECBAgQIECAQM0C/wG8qMwgOJ4joAAAAABJRU5ErkJggg==",
      "text/html": [
       "<div>                            <div id=\"16d59ba7-9fe6-40f7-bedf-992ac72b1d88\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"16d59ba7-9fe6-40f7-bedf-992ac72b1d88\")) {                    Plotly.newPlot(                        \"16d59ba7-9fe6-40f7-bedf-992ac72b1d88\",                        [{\"x\":[\"carat\",\"depth\",\"table\",\"price\",\"x\",\"y\",\"z\"],\"y\":[\"carat\",\"depth\",\"table\",\"price\",\"x\",\"y\",\"z\"],\"z\":[[1.0,0.028224314279026518,0.18161754651523193,0.9215913011934687,0.9750942267264254,0.9517221990129883,0.9533873805614275],[0.028224314279026518,1.0,-0.2957785215265925,-0.010647404584155393,-0.025289246978973112,-0.029340670703632984,0.09492388239528399],[0.18161754651523193,-0.2957785215265925,1.0,0.1271339021217227,0.19534428095550047,0.18376014711635102,0.15092869156479616],[0.9215913011934687,-0.010647404584155393,0.1271339021217227,1.0,0.8844351610161171,0.8654208978641909,0.8612494438514452],[0.9750942267264254,-0.025289246978973112,0.19534428095550047,0.8844351610161171,1.0,0.9747014796703515,0.9707717985774582],[0.9517221990129883,-0.029340670703632984,0.18376014711635102,0.8654208978641909,0.9747014796703515,1.0,0.9520057161562947],[0.9533873805614275,0.09492388239528399,0.15092869156479616,0.8612494438514452,0.9707717985774582,0.9520057161562947,1.0]],\"type\":\"heatmap\"}],                        {\"title\":{\"text\":\"Selected Columns Correlation Heatmap\"},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('16d59ba7-9fe6-40f7-bedf-992ac72b1d88');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "selected_columns = ['carat', 'depth', 'table', 'price', 'x', 'y', 'z']\n",
    "\n",
    "correl = diamonds_data[selected_columns].corr()\n",
    "\n",
    "# Create heatmap trace\n",
    "heatmap_trace = go.Heatmap(z=correl.values,\n",
    "                          x=correl.index.values,\n",
    "                          y=correl.columns.values)\n",
    "# Create layout\n",
    "layout = go.Layout(title='Selected Columns Correlation Heatmap')\n",
    "\n",
    "fig = go.Figure(data=[heatmap_trace], layout=layout)\n",
    "\n",
    "# Plot the heatmap\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b305b5c",
   "metadata": {},
   "source": [
    "* Split the data into a train and test data with a test size of 25% and random state of 50\n",
    "* The sizes of the training and testing datasets are **40,455** and **13,485**, respectively, while the initial indices for the training and testing data are **32,301** and **44,751**, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "0f05cda3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32301</th>\n",
       "      <td>0.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39009</th>\n",
       "      <td>0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22757</th>\n",
       "      <td>1.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15129</th>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17861</th>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48417</th>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22637</th>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42891</th>\n",
       "      <td>0.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38368</th>\n",
       "      <td>0.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14000</th>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40455 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat\n",
       "32301   0.37\n",
       "39009   0.40\n",
       "22757   1.02\n",
       "15129   1.07\n",
       "17861   1.19\n",
       "...      ...\n",
       "48417   0.70\n",
       "22637   2.00\n",
       "42891   0.51\n",
       "38368   0.53\n",
       "14000   1.19\n",
       "\n",
       "[40455 rows x 1 columns]"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>0.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>2.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>0.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8884</th>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34947</th>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21821</th>\n",
       "      <td>1.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9942</th>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8296</th>\n",
       "      <td>1.13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13485 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat\n",
       "44751   0.51\n",
       "22963   2.01\n",
       "9078    1.08\n",
       "26148   2.13\n",
       "29451   0.33\n",
       "...      ...\n",
       "8884    1.04\n",
       "34947   0.30\n",
       "21821   1.50\n",
       "9942    1.01\n",
       "8296    1.13\n",
       "\n",
       "[13485 rows x 1 columns]"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "32301      454\n",
       "39009     1056\n",
       "22757    10773\n",
       "15129     6082\n",
       "17861     7207\n",
       "         ...  \n",
       "48417     1971\n",
       "22637    10685\n",
       "42891     1359\n",
       "38368     1023\n",
       "14000     5698\n",
       "Name: price, Length: 40455, dtype: int64"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "44751     1619\n",
       "22963    11011\n",
       "9078      4521\n",
       "26148    15454\n",
       "29451      702\n",
       "         ...  \n",
       "8884      4486\n",
       "34947      378\n",
       "21821     9892\n",
       "9942      4693\n",
       "8296      4385\n",
       "Name: price, Length: 13485, dtype: int64"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = diamonds_data[['carat']]\n",
    "y = diamonds_data['price']\n",
    "\n",
    "# Split the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=50)\n",
    "\n",
    "X_train\n",
    "X_test\n",
    "y_train\n",
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10d559b5",
   "metadata": {},
   "source": [
    "* Perform Simple Linear Regression using the Train Data.\n",
    "* The R-squared values are **0.8486** for the training data and **0.85148** for the testing data, respectively. These figures suggest that the model accounts for approximately **85%** of the variance in the outcome variable, pointing to a relatively strong model fit. Furthermore, the positive value of the Beta_1 coefficient indicates a direct relationship between the predictor and outcome variables. The Beta_0 coefficient, around **-2244.804**, represents the y-intercept, or the predicted value of the outcome variable when all predictors are set to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "f7514c54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-34 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-34 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-34 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-34 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-34 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-34 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-34 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-34 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-34 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-34 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-34 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-34 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-34 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-34 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-34 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-34 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-34 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-34 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-34 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-34\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-34\" type=\"checkbox\" checked><label for=\"sk-estimator-id-34\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared: 0.8486051211546091\n",
      "R-squared test: 0.8514897700970667\n",
      "Coefficient Beta_1: [7740.34546342]\n",
      "Coefficient Beta_0: -2244.8040004113227\n"
     ]
    }
   ],
   "source": [
    "model = LinearRegression(fit_intercept=True)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# The following gives the R-square score\n",
    "r_squared = model.score(X_train, y_train)\n",
    "r_squared_test = model.score(X_test, y_test)\n",
    "\n",
    "\n",
    "# This is the coefficient Beta_1 (or slope of the Simple Linear Regression line)\n",
    "coefficient = model.coef_\n",
    "\n",
    "# This is the coefficient Beta_0\n",
    "intercept = model.intercept_\n",
    "\n",
    "\n",
    "print(\"R-squared:\", r_squared)\n",
    "print(\"R-squared test:\", r_squared_test)\n",
    "print(\"Coefficient Beta_1:\", coefficient)\n",
    "print(\"Coefficient Beta_0:\", intercept)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "28a77d26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>1,702.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>13,313.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>6,114.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>14,242.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>309.51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       predicted_price\n",
       "44751         1,702.77\n",
       "22963        13,313.29\n",
       "9078          6,114.77\n",
       "26148        14,242.13\n",
       "29451           309.51"
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Assuming 'model' is already trained\n",
    "test_output = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=['predicted_price'])\n",
    "test_output.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70394399",
   "metadata": {},
   "source": [
    "* Dataframe with the predicted values and the actual values as well as the mean absolute error (MAE) and fraction of MAE to the average price.\n",
    "* An MAE of **998.5** indicates that the model's forecasts deviate from the true values by an average of approximately **998.5** units. Given the R-Squared value of **0.84**, this level of mean absolute error was anticipated.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "ff040567",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_price</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>1,702.77</td>\n",
       "      <td>1619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>13,313.29</td>\n",
       "      <td>11011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>6,114.77</td>\n",
       "      <td>4521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>14,242.13</td>\n",
       "      <td>15454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>309.51</td>\n",
       "      <td>702</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       predicted_price  price\n",
       "44751         1,702.77   1619\n",
       "22963        13,313.29  11011\n",
       "9078          6,114.77   4521\n",
       "26148        14,242.13  15454\n",
       "29451           309.51    702"
      ]
     },
     "execution_count": 309,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error is \n",
      "998.4973200867355\n",
      "Fraction of MAE to Average Price: 0.2541206399951147\n"
     ]
    }
   ],
   "source": [
    "test_output = test_output.merge(y_test, left_index = True, right_index = True)\n",
    "test_output.head()\n",
    "mean_absolute_error = abs(test_output['predicted_price'] - test_output['price']).mean()\n",
    "\n",
    "average_price = np.mean(y_test)\n",
    "mae_fraction = mean_absolute_error / average_price\n",
    "\n",
    "\n",
    "print('Mean absolute error is ')\n",
    "print(mean_absolute_error)\n",
    "print(f\"Fraction of MAE to Average Price: {mae_fraction}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78455942",
   "metadata": {},
   "source": [
    "### Multiple Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b295d628",
   "metadata": {},
   "source": [
    "* Train-Test Split by considering multiple numerical variables for the model. \n",
    "* The count of rows remains consistent for both the training and testing datasets, whether it's the split for simple linear regression (SLR) or multiple linear regression (MLR). Similarly, the starting index of the first row does not vary between the splits for SLR and MLR. This consistency arises from the fact that the division of data into training and testing sets is independent of the quantity of predictor variables involved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "1cabcac7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32301</th>\n",
       "      <td>0.37</td>\n",
       "      <td>60.70</td>\n",
       "      <td>60.00</td>\n",
       "      <td>4.65</td>\n",
       "      <td>4.68</td>\n",
       "      <td>2.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39009</th>\n",
       "      <td>0.40</td>\n",
       "      <td>61.70</td>\n",
       "      <td>57.00</td>\n",
       "      <td>4.77</td>\n",
       "      <td>4.73</td>\n",
       "      <td>2.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22757</th>\n",
       "      <td>1.02</td>\n",
       "      <td>61.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>6.46</td>\n",
       "      <td>6.43</td>\n",
       "      <td>3.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15129</th>\n",
       "      <td>1.07</td>\n",
       "      <td>62.30</td>\n",
       "      <td>55.00</td>\n",
       "      <td>6.59</td>\n",
       "      <td>6.54</td>\n",
       "      <td>4.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17861</th>\n",
       "      <td>1.19</td>\n",
       "      <td>61.70</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.78</td>\n",
       "      <td>6.81</td>\n",
       "      <td>4.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48417</th>\n",
       "      <td>0.70</td>\n",
       "      <td>62.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>5.62</td>\n",
       "      <td>5.67</td>\n",
       "      <td>3.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22637</th>\n",
       "      <td>2.00</td>\n",
       "      <td>60.30</td>\n",
       "      <td>56.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>8.16</td>\n",
       "      <td>4.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42891</th>\n",
       "      <td>0.51</td>\n",
       "      <td>62.80</td>\n",
       "      <td>57.00</td>\n",
       "      <td>5.12</td>\n",
       "      <td>5.10</td>\n",
       "      <td>3.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38368</th>\n",
       "      <td>0.53</td>\n",
       "      <td>63.80</td>\n",
       "      <td>57.00</td>\n",
       "      <td>5.10</td>\n",
       "      <td>5.12</td>\n",
       "      <td>3.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14000</th>\n",
       "      <td>1.19</td>\n",
       "      <td>62.70</td>\n",
       "      <td>61.00</td>\n",
       "      <td>6.73</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40455 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat  depth  table    x    y    z\n",
       "32301   0.37  60.70  60.00 4.65 4.68 2.83\n",
       "39009   0.40  61.70  57.00 4.77 4.73 2.93\n",
       "22757   1.02  61.40  58.00 6.46 6.43 3.96\n",
       "15129   1.07  62.30  55.00 6.59 6.54 4.09\n",
       "17861   1.19  61.70  56.00 6.78 6.81 4.19\n",
       "...      ...    ...    ...  ...  ...  ...\n",
       "48417   0.70  62.40  58.00 5.62 5.67 3.52\n",
       "22637   2.00  60.30  56.00 8.27 8.16 4.94\n",
       "42891   0.51  62.80  57.00 5.12 5.10 3.21\n",
       "38368   0.53  63.80  57.00 5.10 5.12 3.26\n",
       "14000   1.19  62.70  61.00 6.73 6.66 4.20\n",
       "\n",
       "[40455 rows x 6 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>0.51</td>\n",
       "      <td>61.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>5.13</td>\n",
       "      <td>5.09</td>\n",
       "      <td>3.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>2.01</td>\n",
       "      <td>62.90</td>\n",
       "      <td>54.00</td>\n",
       "      <td>8.06</td>\n",
       "      <td>7.93</td>\n",
       "      <td>5.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>1.08</td>\n",
       "      <td>62.10</td>\n",
       "      <td>59.00</td>\n",
       "      <td>6.57</td>\n",
       "      <td>6.53</td>\n",
       "      <td>4.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>2.13</td>\n",
       "      <td>61.50</td>\n",
       "      <td>57.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>8.34</td>\n",
       "      <td>5.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>0.33</td>\n",
       "      <td>61.90</td>\n",
       "      <td>56.00</td>\n",
       "      <td>4.46</td>\n",
       "      <td>4.49</td>\n",
       "      <td>2.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8884</th>\n",
       "      <td>1.04</td>\n",
       "      <td>62.40</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>6.48</td>\n",
       "      <td>4.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34947</th>\n",
       "      <td>0.30</td>\n",
       "      <td>61.90</td>\n",
       "      <td>60.00</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.29</td>\n",
       "      <td>2.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21821</th>\n",
       "      <td>1.50</td>\n",
       "      <td>60.20</td>\n",
       "      <td>61.00</td>\n",
       "      <td>7.27</td>\n",
       "      <td>7.32</td>\n",
       "      <td>4.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9942</th>\n",
       "      <td>1.01</td>\n",
       "      <td>61.10</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.44</td>\n",
       "      <td>6.48</td>\n",
       "      <td>3.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8296</th>\n",
       "      <td>1.13</td>\n",
       "      <td>61.70</td>\n",
       "      <td>57.00</td>\n",
       "      <td>6.70</td>\n",
       "      <td>6.59</td>\n",
       "      <td>4.13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13485 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat  depth  table    x    y    z\n",
       "44751   0.51  61.40  58.00 5.13 5.09 3.14\n",
       "22963   2.01  62.90  54.00 8.06 7.93 5.05\n",
       "9078    1.08  62.10  59.00 6.57 6.53 4.07\n",
       "26148   2.13  61.50  57.00 8.27 8.34 5.11\n",
       "29451   0.33  61.90  56.00 4.46 4.49 2.77\n",
       "...      ...    ...    ...  ...  ...  ...\n",
       "8884    1.04  62.40  56.00 6.40 6.48 4.02\n",
       "34947   0.30  61.90  60.00 4.27 4.29 2.65\n",
       "21821   1.50  60.20  61.00 7.27 7.32 4.39\n",
       "9942    1.01  61.10  56.00 6.44 6.48 3.95\n",
       "8296    1.13  61.70  57.00 6.70 6.59 4.13\n",
       "\n",
       "[13485 rows x 6 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "32301      454\n",
       "39009     1056\n",
       "22757    10773\n",
       "15129     6082\n",
       "17861     7207\n",
       "         ...  \n",
       "48417     1971\n",
       "22637    10685\n",
       "42891     1359\n",
       "38368     1023\n",
       "14000     5698\n",
       "Name: price, Length: 40455, dtype: int64"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "44751     1619\n",
       "22963    11011\n",
       "9078      4521\n",
       "26148    15454\n",
       "29451      702\n",
       "         ...  \n",
       "8884      4486\n",
       "34947      378\n",
       "21821     9892\n",
       "9942      4693\n",
       "8296      4385\n",
       "Name: price, Length: 13485, dtype: int64"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This is just to show how we can do test train split like we did for excel in class\n",
    "X_train_multi, X_test_multi, y_train_multi, y_test_multi = train_test_split(diamonds_data[['carat', 'depth', 'table', 'x', 'y', 'z']], diamonds_data['price'], test_size=0.25, random_state=50) \n",
    "\n",
    "\n",
    "X_train_multi\n",
    "X_test_multi\n",
    "y_train_multi\n",
    "y_test_multi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9da13a50",
   "metadata": {},
   "source": [
    "* Create a multiple regression model based on the train-test data. \n",
    "* The R-squared values are **0.8580** for the training data and **0.8623** for the testing data, indicating a relatively strong model fit. Incorporating additional features resulted in a modest enhancement of the fit, improving it by merely **1%-2%**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "004849fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-35 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-35 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-35 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-35 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-35 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-35 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-35 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-35 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-35 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-35 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-35 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-35 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-35 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-35 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-35 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-35 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-35 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-35 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-35 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-35\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-35\" type=\"checkbox\" checked><label for=\"sk-estimator-id-35\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared: 0.8580892707297321\n",
      "R-squared test: 0.8623985511113464\n",
      "Coefficient Beta_1: [10572.42070164  -212.30889735  -100.98829263 -1339.48535974\n",
      "    28.72790744   207.71501298]\n",
      "Coefficient Beta_0: 21184.406953430855\n"
     ]
    }
   ],
   "source": [
    "model_multi = LinearRegression(fit_intercept=True)\n",
    "model_multi.fit(X_train_multi, y_train_multi)\n",
    "\n",
    "# The following gives the R-square score\n",
    "r_squared = model_multi.score(X_train_multi, y_train_multi)\n",
    "r_squared_test = model_multi.score(X_test_multi, y_test_multi)\n",
    "\n",
    "\n",
    "# This is the coefficient Beta_1 (or slope of the Simple Linear Regression line)\n",
    "coefficient = model_multi.coef_\n",
    "\n",
    "# This is the coefficient Beta_0\n",
    "intercept = model_multi.intercept_\n",
    "\n",
    "\n",
    "print(\"R-squared:\", r_squared)\n",
    "print(\"R-squared test:\", r_squared_test)\n",
    "print(\"Coefficient Beta_1:\", coefficient)\n",
    "print(\"Coefficient Beta_0:\", intercept)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c94c5aa5",
   "metadata": {},
   "source": [
    "* Create a dataframe of the predicted prices and actual prices as well as calculate the MAE and MAER.\n",
    "* The Mean Absolute Error (MAE) is calculated as **882.59**, while the Mean Absolute Error Ratio (MAER) is **0.2246**. This represents a significant reduction compared to the Simple Linear Regression (SLR) model, indicating that the predictions are now much closer to the actual values than those made by the SLR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "784d1e3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 882.5996348443864\n",
      "Fraction of MAE to Average Price: 0.22462432252359685\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predicted Price</th>\n",
       "      <th>Actual Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>1,610.14</td>\n",
       "      <td>1619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>14,107.90</td>\n",
       "      <td>11011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>5,692.50</td>\n",
       "      <td>4521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>15,113.80</td>\n",
       "      <td>15454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>606.29</td>\n",
       "      <td>702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23983</th>\n",
       "      <td>9,547.81</td>\n",
       "      <td>12141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24181</th>\n",
       "      <td>17,148.17</td>\n",
       "      <td>12364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50466</th>\n",
       "      <td>3,166.81</td>\n",
       "      <td>2265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1844</th>\n",
       "      <td>2,976.18</td>\n",
       "      <td>3063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9443</th>\n",
       "      <td>5,252.12</td>\n",
       "      <td>4592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28622</th>\n",
       "      <td>643.80</td>\n",
       "      <td>433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26624</th>\n",
       "      <td>15,055.08</td>\n",
       "      <td>16390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20466</th>\n",
       "      <td>6,093.48</td>\n",
       "      <td>8809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4163</th>\n",
       "      <td>3,666.49</td>\n",
       "      <td>3551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22098</th>\n",
       "      <td>9,393.60</td>\n",
       "      <td>10122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19918</th>\n",
       "      <td>8,426.34</td>\n",
       "      <td>8467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43544</th>\n",
       "      <td>1,886.27</td>\n",
       "      <td>1428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16271</th>\n",
       "      <td>4,811.14</td>\n",
       "      <td>6509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8931</th>\n",
       "      <td>5,519.53</td>\n",
       "      <td>4497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45315</th>\n",
       "      <td>420.47</td>\n",
       "      <td>524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Predicted Price  Actual Price\n",
       "44751         1,610.14          1619\n",
       "22963        14,107.90         11011\n",
       "9078          5,692.50          4521\n",
       "26148        15,113.80         15454\n",
       "29451           606.29           702\n",
       "23983         9,547.81         12141\n",
       "24181        17,148.17         12364\n",
       "50466         3,166.81          2265\n",
       "1844          2,976.18          3063\n",
       "9443          5,252.12          4592\n",
       "28622           643.80           433\n",
       "26624        15,055.08         16390\n",
       "20466         6,093.48          8809\n",
       "4163          3,666.49          3551\n",
       "22098         9,393.60         10122\n",
       "19918         8,426.34          8467\n",
       "43544         1,886.27          1428\n",
       "16271         4,811.14          6509\n",
       "8931          5,519.53          4497\n",
       "45315           420.47           524"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict the target variable on the test data\n",
    "y_test_pred_multi = model_multi.predict(X_test_multi)\n",
    "\n",
    "# Create a dataframe with predictions and actual prices\n",
    "predictions_df = pd.DataFrame({'Predicted Price': y_test_pred_multi, 'Actual Price': y_test_multi})\n",
    "\n",
    "# Calculate Mean Absolute Error (MAE)\n",
    "mae = np.mean(np.abs(y_test_pred_multi - y_test_multi))\n",
    "\n",
    "# Calculate fraction of MAE to the average price in the test set\n",
    "average_price = np.mean(y_test_multi)\n",
    "mae_fraction = mae / average_price\n",
    "\n",
    "# Display MAE and fraction of MAE to average price\n",
    "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
    "print(f\"Fraction of MAE to Average Price: {mae_fraction}\")\n",
    "predictions_df.head(20)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "451e0941",
   "metadata": {},
   "source": [
    "### Multiple Linear Regression with Categorical Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1005294d",
   "metadata": {},
   "source": [
    "* Display first 5 rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "86cfc1d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.50</td>\n",
       "      <td>55.00</td>\n",
       "      <td>326</td>\n",
       "      <td>3.95</td>\n",
       "      <td>3.98</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.21</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI1</td>\n",
       "      <td>59.80</td>\n",
       "      <td>61.00</td>\n",
       "      <td>326</td>\n",
       "      <td>3.89</td>\n",
       "      <td>3.84</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Good</td>\n",
       "      <td>E</td>\n",
       "      <td>VS1</td>\n",
       "      <td>56.90</td>\n",
       "      <td>65.00</td>\n",
       "      <td>327</td>\n",
       "      <td>4.05</td>\n",
       "      <td>4.07</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.29</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>334</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4.23</td>\n",
       "      <td>2.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.31</td>\n",
       "      <td>Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.30</td>\n",
       "      <td>58.00</td>\n",
       "      <td>335</td>\n",
       "      <td>4.34</td>\n",
       "      <td>4.35</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   carat      cut color clarity  depth  table  price    x    y    z\n",
       "0   0.23    Ideal     E     SI2  61.50  55.00    326 3.95 3.98 2.43\n",
       "1   0.21  Premium     E     SI1  59.80  61.00    326 3.89 3.84 2.31\n",
       "2   0.23     Good     E     VS1  56.90  65.00    327 4.05 4.07 2.31\n",
       "3   0.29  Premium     I     VS2  62.40  58.00    334 4.20 4.23 2.63\n",
       "4   0.31     Good     J     SI2  63.30  58.00    335 4.34 4.35 2.75"
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diamonds_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e03fab5f",
   "metadata": {},
   "source": [
    "* Perform One hot encoding on the categorical variables. \n",
    "* The total number of columns after one-hot encoding of the categorical variables is **24**. Initially, there were **7** columns, which expanded to **24** following the encoding process. By applying `drop='first'` to avoid multicollinearity, one column representing a category was omitted, leaving the dataset with a finalized column count of **24**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "ca3c4623",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   carat  depth  table  price    x    y    z  cut_Good  cut_Ideal  \\\n",
      "0   0.23  61.50  55.00    326 3.95 3.98 2.43      0.00       1.00   \n",
      "1   0.21  59.80  61.00    326 3.89 3.84 2.31      0.00       0.00   \n",
      "2   0.23  56.90  65.00    327 4.05 4.07 2.31      1.00       0.00   \n",
      "3   0.29  62.40  58.00    334 4.20 4.23 2.63      0.00       0.00   \n",
      "4   0.31  63.30  58.00    335 4.34 4.35 2.75      1.00       0.00   \n",
      "\n",
      "   cut_Premium  ...  color_H  color_I  color_J  clarity_IF  clarity_SI1  \\\n",
      "0         0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
      "1         1.00  ...     0.00     0.00     0.00        0.00         1.00   \n",
      "2         0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
      "3         1.00  ...     0.00     1.00     0.00        0.00         0.00   \n",
      "4         0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
      "\n",
      "   clarity_SI2  clarity_VS1  clarity_VS2  clarity_VVS1  clarity_VVS2  \n",
      "0         1.00         0.00         0.00          0.00          0.00  \n",
      "1         0.00         0.00         0.00          0.00          0.00  \n",
      "2         0.00         1.00         0.00          0.00          0.00  \n",
      "3         0.00         0.00         1.00          0.00          0.00  \n",
      "4         1.00         0.00         0.00          0.00          0.00  \n",
      "\n",
      "[5 rows x 24 columns]\n",
      "Index(['carat', 'depth', 'table', 'price', 'x', 'y', 'z', 'cut_Good',\n",
      "       'cut_Ideal', 'cut_Premium', 'cut_Very Good', 'color_E', 'color_F',\n",
      "       'color_G', 'color_H', 'color_I', 'color_J', 'clarity_IF', 'clarity_SI1',\n",
      "       'clarity_SI2', 'clarity_VS1', 'clarity_VS2', 'clarity_VVS1',\n",
      "       'clarity_VVS2'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import pandas as pd\n",
    "\n",
    "# Assuming diamonds_data is your DataFrame with the columns 'cut', 'color', 'clarity'\n",
    "categorical_columns = ['cut', 'color', 'clarity']\n",
    "\n",
    "# Extract the numerical columns\n",
    "numerical_columns = diamonds_data.drop(categorical_columns, axis=1)\n",
    "\n",
    "# Extract the categorical columns\n",
    "categorical_data = diamonds_data[categorical_columns]\n",
    "\n",
    "# Initialize the OneHotEncoder\n",
    "encoder = OneHotEncoder(drop='first', sparse_output=False)  # drop='first' to avoid multicollinearity\n",
    "\n",
    "# Fit and transform the categorical data\n",
    "encoded_data = encoder.fit_transform(categorical_data)\n",
    "\n",
    "# Create a DataFrame with the encoded data\n",
    "encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(categorical_columns))\n",
    "\n",
    "# Concatenate the numerical columns and the encoded categorical columns\n",
    "final_df = pd.concat([numerical_columns, encoded_df], axis=1)\n",
    "\n",
    "# Display the resulting DataFrame\\\n",
    "\n",
    "print(final_df.head())\n",
    "print(final_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "a96a09dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>cut_Good</th>\n",
       "      <th>cut_Ideal</th>\n",
       "      <th>cut_Premium</th>\n",
       "      <th>cut_Very Good</th>\n",
       "      <th>...</th>\n",
       "      <th>color_H</th>\n",
       "      <th>color_I</th>\n",
       "      <th>color_J</th>\n",
       "      <th>clarity_IF</th>\n",
       "      <th>clarity_SI1</th>\n",
       "      <th>clarity_SI2</th>\n",
       "      <th>clarity_VS1</th>\n",
       "      <th>clarity_VS2</th>\n",
       "      <th>clarity_VVS1</th>\n",
       "      <th>clarity_VVS2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32301</th>\n",
       "      <td>0.37</td>\n",
       "      <td>60.70</td>\n",
       "      <td>60.00</td>\n",
       "      <td>4.65</td>\n",
       "      <td>4.68</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39009</th>\n",
       "      <td>0.40</td>\n",
       "      <td>61.70</td>\n",
       "      <td>57.00</td>\n",
       "      <td>4.77</td>\n",
       "      <td>4.73</td>\n",
       "      <td>2.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22757</th>\n",
       "      <td>1.02</td>\n",
       "      <td>61.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>6.46</td>\n",
       "      <td>6.43</td>\n",
       "      <td>3.96</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15129</th>\n",
       "      <td>1.07</td>\n",
       "      <td>62.30</td>\n",
       "      <td>55.00</td>\n",
       "      <td>6.59</td>\n",
       "      <td>6.54</td>\n",
       "      <td>4.09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17861</th>\n",
       "      <td>1.19</td>\n",
       "      <td>61.70</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.78</td>\n",
       "      <td>6.81</td>\n",
       "      <td>4.19</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48417</th>\n",
       "      <td>0.70</td>\n",
       "      <td>62.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>5.62</td>\n",
       "      <td>5.67</td>\n",
       "      <td>3.52</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22637</th>\n",
       "      <td>2.00</td>\n",
       "      <td>60.30</td>\n",
       "      <td>56.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>8.16</td>\n",
       "      <td>4.94</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42891</th>\n",
       "      <td>0.51</td>\n",
       "      <td>62.80</td>\n",
       "      <td>57.00</td>\n",
       "      <td>5.12</td>\n",
       "      <td>5.10</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38368</th>\n",
       "      <td>0.53</td>\n",
       "      <td>63.80</td>\n",
       "      <td>57.00</td>\n",
       "      <td>5.10</td>\n",
       "      <td>5.12</td>\n",
       "      <td>3.26</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14000</th>\n",
       "      <td>1.19</td>\n",
       "      <td>62.70</td>\n",
       "      <td>61.00</td>\n",
       "      <td>6.73</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40455 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat  depth  table    x    y    z  cut_Good  cut_Ideal  cut_Premium  \\\n",
       "32301   0.37  60.70  60.00 4.65 4.68 2.83      0.00       0.00         1.00   \n",
       "39009   0.40  61.70  57.00 4.77 4.73 2.93      0.00       1.00         0.00   \n",
       "22757   1.02  61.40  58.00 6.46 6.43 3.96      0.00       0.00         1.00   \n",
       "15129   1.07  62.30  55.00 6.59 6.54 4.09      0.00       1.00         0.00   \n",
       "17861   1.19  61.70  56.00 6.78 6.81 4.19      0.00       1.00         0.00   \n",
       "...      ...    ...    ...  ...  ...  ...       ...        ...          ...   \n",
       "48417   0.70  62.40  58.00 5.62 5.67 3.52      0.00       0.00         0.00   \n",
       "22637   2.00  60.30  56.00 8.27 8.16 4.94      0.00       1.00         0.00   \n",
       "42891   0.51  62.80  57.00 5.12 5.10 3.21      0.00       1.00         0.00   \n",
       "38368   0.53  63.80  57.00 5.10 5.12 3.26      1.00       0.00         0.00   \n",
       "14000   1.19  62.70  61.00 6.73 6.66 4.20      0.00       0.00         1.00   \n",
       "\n",
       "       cut_Very Good  ...  color_H  color_I  color_J  clarity_IF  clarity_SI1  \\\n",
       "32301           0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
       "39009           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "22757           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "15129           0.00  ...     1.00     0.00     0.00        0.00         0.00   \n",
       "17861           0.00  ...     0.00     1.00     0.00        1.00         0.00   \n",
       "...              ...  ...      ...      ...      ...         ...          ...   \n",
       "48417           1.00  ...     0.00     1.00     0.00        0.00         0.00   \n",
       "22637           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "42891           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "38368           0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
       "14000           0.00  ...     1.00     0.00     0.00        0.00         1.00   \n",
       "\n",
       "       clarity_SI2  clarity_VS1  clarity_VS2  clarity_VVS1  clarity_VVS2  \n",
       "32301         0.00         0.00         1.00          0.00          0.00  \n",
       "39009         0.00         0.00         0.00          0.00          1.00  \n",
       "22757         0.00         0.00         0.00          0.00          1.00  \n",
       "15129         0.00         1.00         0.00          0.00          0.00  \n",
       "17861         0.00         0.00         0.00          0.00          0.00  \n",
       "...            ...          ...          ...           ...           ...  \n",
       "48417         0.00         1.00         0.00          0.00          0.00  \n",
       "22637         0.00         0.00         0.00          0.00          0.00  \n",
       "42891         1.00         0.00         0.00          0.00          0.00  \n",
       "38368         0.00         0.00         1.00          0.00          0.00  \n",
       "14000         0.00         0.00         0.00          0.00          0.00  \n",
       "\n",
       "[40455 rows x 23 columns]"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>cut_Good</th>\n",
       "      <th>cut_Ideal</th>\n",
       "      <th>cut_Premium</th>\n",
       "      <th>cut_Very Good</th>\n",
       "      <th>...</th>\n",
       "      <th>color_H</th>\n",
       "      <th>color_I</th>\n",
       "      <th>color_J</th>\n",
       "      <th>clarity_IF</th>\n",
       "      <th>clarity_SI1</th>\n",
       "      <th>clarity_SI2</th>\n",
       "      <th>clarity_VS1</th>\n",
       "      <th>clarity_VS2</th>\n",
       "      <th>clarity_VVS1</th>\n",
       "      <th>clarity_VVS2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>0.51</td>\n",
       "      <td>61.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>5.13</td>\n",
       "      <td>5.09</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>2.01</td>\n",
       "      <td>62.90</td>\n",
       "      <td>54.00</td>\n",
       "      <td>8.06</td>\n",
       "      <td>7.93</td>\n",
       "      <td>5.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>1.08</td>\n",
       "      <td>62.10</td>\n",
       "      <td>59.00</td>\n",
       "      <td>6.57</td>\n",
       "      <td>6.53</td>\n",
       "      <td>4.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>2.13</td>\n",
       "      <td>61.50</td>\n",
       "      <td>57.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>8.34</td>\n",
       "      <td>5.11</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>0.33</td>\n",
       "      <td>61.90</td>\n",
       "      <td>56.00</td>\n",
       "      <td>4.46</td>\n",
       "      <td>4.49</td>\n",
       "      <td>2.77</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8884</th>\n",
       "      <td>1.04</td>\n",
       "      <td>62.40</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>6.48</td>\n",
       "      <td>4.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34947</th>\n",
       "      <td>0.30</td>\n",
       "      <td>61.90</td>\n",
       "      <td>60.00</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.29</td>\n",
       "      <td>2.65</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21821</th>\n",
       "      <td>1.50</td>\n",
       "      <td>60.20</td>\n",
       "      <td>61.00</td>\n",
       "      <td>7.27</td>\n",
       "      <td>7.32</td>\n",
       "      <td>4.39</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9942</th>\n",
       "      <td>1.01</td>\n",
       "      <td>61.10</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.44</td>\n",
       "      <td>6.48</td>\n",
       "      <td>3.95</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8296</th>\n",
       "      <td>1.13</td>\n",
       "      <td>61.70</td>\n",
       "      <td>57.00</td>\n",
       "      <td>6.70</td>\n",
       "      <td>6.59</td>\n",
       "      <td>4.13</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13485 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat  depth  table    x    y    z  cut_Good  cut_Ideal  cut_Premium  \\\n",
       "44751   0.51  61.40  58.00 5.13 5.09 3.14      0.00       0.00         1.00   \n",
       "22963   2.01  62.90  54.00 8.06 7.93 5.05      0.00       1.00         0.00   \n",
       "9078    1.08  62.10  59.00 6.57 6.53 4.07      0.00       1.00         0.00   \n",
       "26148   2.13  61.50  57.00 8.27 8.34 5.11      0.00       0.00         0.00   \n",
       "29451   0.33  61.90  56.00 4.46 4.49 2.77      0.00       1.00         0.00   \n",
       "...      ...    ...    ...  ...  ...  ...       ...        ...          ...   \n",
       "8884    1.04  62.40  56.00 6.40 6.48 4.02      0.00       1.00         0.00   \n",
       "34947   0.30  61.90  60.00 4.27 4.29 2.65      0.00       0.00         1.00   \n",
       "21821   1.50  60.20  61.00 7.27 7.32 4.39      1.00       0.00         0.00   \n",
       "9942    1.01  61.10  56.00 6.44 6.48 3.95      0.00       1.00         0.00   \n",
       "8296    1.13  61.70  57.00 6.70 6.59 4.13      0.00       1.00         0.00   \n",
       "\n",
       "       cut_Very Good  ...  color_H  color_I  color_J  clarity_IF  clarity_SI1  \\\n",
       "44751           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "22963           0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
       "9078            0.00  ...     0.00     1.00     0.00        0.00         1.00   \n",
       "26148           1.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "29451           0.00  ...     0.00     0.00     0.00        0.00         1.00   \n",
       "...              ...  ...      ...      ...      ...         ...          ...   \n",
       "8884            0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "34947           0.00  ...     1.00     0.00     0.00        0.00         0.00   \n",
       "21821           0.00  ...     0.00     0.00     0.00        0.00         1.00   \n",
       "9942            0.00  ...     1.00     0.00     0.00        0.00         0.00   \n",
       "8296            0.00  ...     0.00     1.00     0.00        0.00         0.00   \n",
       "\n",
       "       clarity_SI2  clarity_VS1  clarity_VS2  clarity_VVS1  clarity_VVS2  \n",
       "44751         0.00         0.00         1.00          0.00          0.00  \n",
       "22963         1.00         0.00         0.00          0.00          0.00  \n",
       "9078          0.00         0.00         0.00          0.00          0.00  \n",
       "26148         1.00         0.00         0.00          0.00          0.00  \n",
       "29451         0.00         0.00         0.00          0.00          0.00  \n",
       "...            ...          ...          ...           ...           ...  \n",
       "8884          1.00         0.00         0.00          0.00          0.00  \n",
       "34947         1.00         0.00         0.00          0.00          0.00  \n",
       "21821         0.00         0.00         0.00          0.00          0.00  \n",
       "9942          1.00         0.00         0.00          0.00          0.00  \n",
       "8296          1.00         0.00         0.00          0.00          0.00  \n",
       "\n",
       "[13485 rows x 23 columns]"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "32301      454\n",
       "39009     1056\n",
       "22757    10773\n",
       "15129     6082\n",
       "17861     7207\n",
       "         ...  \n",
       "48417     1971\n",
       "22637    10685\n",
       "42891     1359\n",
       "38368     1023\n",
       "14000     5698\n",
       "Name: price, Length: 40455, dtype: int64"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "44751     1619\n",
       "22963    11011\n",
       "9078      4521\n",
       "26148    15454\n",
       "29451      702\n",
       "         ...  \n",
       "8884      4486\n",
       "34947      378\n",
       "21821     9892\n",
       "9942      4693\n",
       "8296      4385\n",
       "Name: price, Length: 13485, dtype: int64"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# X_train, X_test, y_train, y_test = train_test_split(subset_data.drop(columns = ['SalePrice']), subset_data['SalePrice'], test_size=0.25)\n",
    "X_train_cat, X_test_cat, y_train_cat, y_test_cat = train_test_split(final_df.drop(columns = ['price']), final_df['price'], test_size=0.25, random_state=50)\n",
    "\n",
    "X_train_cat\n",
    "X_test_cat\n",
    "y_train_cat\n",
    "y_test_cat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38422bda",
   "metadata": {},
   "source": [
    "* The R-squared and b0 values come out to be **0.9197** and **1499.339** respectively. \n",
    "* The R-Squared value indicates that this model has a significantly better fit compared to all previous models.\n",
    "* The other coeffecient values are as follows - [ 1.11814801e+04 -5.85181599e+01 -2.43103736e+01 -9.47154791e+02 4.71160598e+00 -9.21343078e+01  5.64156045e+02  8.35219660e+02 7.65684380e+02  7.33319794e+02 -2.25861063e+02 -2.76687793e+02 -4.79782911e+02 -9.73649105e+02 -1.46411040e+03 -2.39532202e+03 5.45238205e+03  3.78052359e+03  2.82037545e+03  4.70977853e+03 4.38909093e+03  5.12101322e+03  5.07443217e+03] for all the individual 24 columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "74f889c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-36 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-36 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-36 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-36 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-36 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-36 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-36 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-36 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-36 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-36 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-36 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-36 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-36 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-36 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-36 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-36 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-36 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-36 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-36 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-36\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-36\" type=\"checkbox\" checked><label for=\"sk-estimator-id-36\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared: 0.9197535054831985\n",
      "R-squared test: 0.9197839099301064\n",
      "Coefficient Beta_1: [ 1.11814801e+04 -5.85181599e+01 -2.43103736e+01 -9.47154791e+02\n",
      "  4.71160598e+00 -9.21343078e+01  5.64156045e+02  8.35219660e+02\n",
      "  7.65684380e+02  7.33319794e+02 -2.25861063e+02 -2.76687793e+02\n",
      " -4.79782911e+02 -9.73649105e+02 -1.46411040e+03 -2.39532202e+03\n",
      "  5.45238205e+03  3.78052359e+03  2.82037545e+03  4.70977853e+03\n",
      "  4.38909093e+03  5.12101322e+03  5.07443217e+03]\n",
      "Coefficient Beta_0: 1499.3392254312803\n"
     ]
    }
   ],
   "source": [
    "model = LinearRegression(fit_intercept = True)\n",
    "model.fit(X_train_cat, y_train_cat) \n",
    "\n",
    "# The following gives the R-square score\n",
    "r_squared = model.score(X_train_cat, y_train_cat) \n",
    "\n",
    "r_squared_test = model.score(X_test_cat, y_test_cat)\n",
    "\n",
    "\n",
    "# This is the coefficient Beta_1 (or slope of the Simple Linear Regression line)\n",
    "coefficient = model.coef_\n",
    "\n",
    "# This is the coefficient Beta_0\n",
    "intercept = model.intercept_\n",
    "\n",
    "\n",
    "print(\"R-squared:\", r_squared)\n",
    "print(\"R-squared test:\", r_squared_test)\n",
    "print(\"Coefficient Beta_1:\", coefficient)\n",
    "print(\"Coefficient Beta_0:\", intercept)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "ae5990e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>1,952.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>12,178.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>5,091.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>15,140.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>137.09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       predicted_price\n",
       "44751         1,952.74\n",
       "22963        12,178.85\n",
       "9078          5,091.65\n",
       "26148        15,140.76\n",
       "29451           137.09"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_output = pd.DataFrame(model.predict(X_test_cat), index = X_test_cat.index, columns = ['predicted_price'])\n",
    "# When extending to multiple features remove .array.reshape(-1, 1)\n",
    "test_output.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c02fcc8",
   "metadata": {},
   "source": [
    "* The mean absolute error comes out to be **744.82**, based on the R-squared value of **91%** errors not very surprising when compared to other model and their R-squared and MAE values.\n",
    "* However, the MAE value did reduce slightly as compared to other models when using categorical features which was expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "7fee40f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_price</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>1,952.74</td>\n",
       "      <td>1619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>12,178.85</td>\n",
       "      <td>11011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>5,091.65</td>\n",
       "      <td>4521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>15,140.76</td>\n",
       "      <td>15454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>137.09</td>\n",
       "      <td>702</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       predicted_price  price\n",
       "44751         1,952.74   1619\n",
       "22963        12,178.85  11011\n",
       "9078          5,091.65   4521\n",
       "26148        15,140.76  15454\n",
       "29451           137.09    702"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error is \n",
      "744.8276400124321\n",
      "Fraction of MAE to Average Price: 0.18956092596179275\n"
     ]
    }
   ],
   "source": [
    "test_output = test_output.merge(y_test_cat, left_index = True, right_index = True)\n",
    "test_output.head()\n",
    "mean_absolute_error = abs(test_output['predicted_price'] - test_output['price']).mean()\n",
    "print('Mean absolute error is ')\n",
    "print(mean_absolute_error)\n",
    "\n",
    "average_price_cat = np.mean(y_test_cat)\n",
    "mae_fraction = mean_absolute_error / average_price_cat\n",
    "\n",
    "print(f\"Fraction of MAE to Average Price: {mae_fraction}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8b9e4ec",
   "metadata": {},
   "source": [
    "### Quantile Regression with Categorical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "f8b03264",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   carat  depth  table  price    x    y    z  cut_Good  cut_Ideal  \\\n",
      "0   0.23  61.50  55.00    326 3.95 3.98 2.43      0.00       1.00   \n",
      "1   0.21  59.80  61.00    326 3.89 3.84 2.31      0.00       0.00   \n",
      "2   0.23  56.90  65.00    327 4.05 4.07 2.31      1.00       0.00   \n",
      "3   0.29  62.40  58.00    334 4.20 4.23 2.63      0.00       0.00   \n",
      "4   0.31  63.30  58.00    335 4.34 4.35 2.75      1.00       0.00   \n",
      "\n",
      "   cut_Premium  ...  color_H  color_I  color_J  clarity_IF  clarity_SI1  \\\n",
      "0         0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
      "1         1.00  ...     0.00     0.00     0.00        0.00         1.00   \n",
      "2         0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
      "3         1.00  ...     0.00     1.00     0.00        0.00         0.00   \n",
      "4         0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
      "\n",
      "   clarity_SI2  clarity_VS1  clarity_VS2  clarity_VVS1  clarity_VVS2  \n",
      "0         1.00         0.00         0.00          0.00          0.00  \n",
      "1         0.00         0.00         0.00          0.00          0.00  \n",
      "2         0.00         1.00         0.00          0.00          0.00  \n",
      "3         0.00         0.00         1.00          0.00          0.00  \n",
      "4         1.00         0.00         0.00          0.00          0.00  \n",
      "\n",
      "[5 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import pandas as pd\n",
    "\n",
    "# Assuming diamonds_data is your DataFrame with the columns 'cut', 'color', 'clarity'\n",
    "categorical_columns = ['cut', 'color', 'clarity']\n",
    "\n",
    "# Extract the numerical columns\n",
    "numerical_columns = diamonds_data.drop(categorical_columns, axis=1)\n",
    "\n",
    "# Extract the categorical columns\n",
    "categorical_data = diamonds_data[categorical_columns]\n",
    "\n",
    "# Initialize the OneHotEncoder\n",
    "encoder = OneHotEncoder(drop='first', sparse_output=False)  # drop='first' to avoid multicollinearity\n",
    "\n",
    "# Fit and transform the categorical data\n",
    "encoded_data = encoder.fit_transform(categorical_data)\n",
    "\n",
    "# Create a DataFrame with the encoded data\n",
    "encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(categorical_columns))\n",
    "\n",
    "# Concatenate the numerical columns and the encoded categorical columns\n",
    "final_df = pd.concat([numerical_columns, encoded_df], axis=1)\n",
    "\n",
    "# Display the resulting DataFrame\\\n",
    "\n",
    "print(final_df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "edfdd6d7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>cut_Good</th>\n",
       "      <th>cut_Ideal</th>\n",
       "      <th>cut_Premium</th>\n",
       "      <th>cut_Very Good</th>\n",
       "      <th>...</th>\n",
       "      <th>color_H</th>\n",
       "      <th>color_I</th>\n",
       "      <th>color_J</th>\n",
       "      <th>clarity_IF</th>\n",
       "      <th>clarity_SI1</th>\n",
       "      <th>clarity_SI2</th>\n",
       "      <th>clarity_VS1</th>\n",
       "      <th>clarity_VS2</th>\n",
       "      <th>clarity_VVS1</th>\n",
       "      <th>clarity_VVS2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32301</th>\n",
       "      <td>0.37</td>\n",
       "      <td>60.70</td>\n",
       "      <td>60.00</td>\n",
       "      <td>4.65</td>\n",
       "      <td>4.68</td>\n",
       "      <td>2.83</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39009</th>\n",
       "      <td>0.40</td>\n",
       "      <td>61.70</td>\n",
       "      <td>57.00</td>\n",
       "      <td>4.77</td>\n",
       "      <td>4.73</td>\n",
       "      <td>2.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22757</th>\n",
       "      <td>1.02</td>\n",
       "      <td>61.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>6.46</td>\n",
       "      <td>6.43</td>\n",
       "      <td>3.96</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15129</th>\n",
       "      <td>1.07</td>\n",
       "      <td>62.30</td>\n",
       "      <td>55.00</td>\n",
       "      <td>6.59</td>\n",
       "      <td>6.54</td>\n",
       "      <td>4.09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17861</th>\n",
       "      <td>1.19</td>\n",
       "      <td>61.70</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.78</td>\n",
       "      <td>6.81</td>\n",
       "      <td>4.19</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48417</th>\n",
       "      <td>0.70</td>\n",
       "      <td>62.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>5.62</td>\n",
       "      <td>5.67</td>\n",
       "      <td>3.52</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22637</th>\n",
       "      <td>2.00</td>\n",
       "      <td>60.30</td>\n",
       "      <td>56.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>8.16</td>\n",
       "      <td>4.94</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42891</th>\n",
       "      <td>0.51</td>\n",
       "      <td>62.80</td>\n",
       "      <td>57.00</td>\n",
       "      <td>5.12</td>\n",
       "      <td>5.10</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38368</th>\n",
       "      <td>0.53</td>\n",
       "      <td>63.80</td>\n",
       "      <td>57.00</td>\n",
       "      <td>5.10</td>\n",
       "      <td>5.12</td>\n",
       "      <td>3.26</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14000</th>\n",
       "      <td>1.19</td>\n",
       "      <td>62.70</td>\n",
       "      <td>61.00</td>\n",
       "      <td>6.73</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40455 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat  depth  table    x    y    z  cut_Good  cut_Ideal  cut_Premium  \\\n",
       "32301   0.37  60.70  60.00 4.65 4.68 2.83      0.00       0.00         1.00   \n",
       "39009   0.40  61.70  57.00 4.77 4.73 2.93      0.00       1.00         0.00   \n",
       "22757   1.02  61.40  58.00 6.46 6.43 3.96      0.00       0.00         1.00   \n",
       "15129   1.07  62.30  55.00 6.59 6.54 4.09      0.00       1.00         0.00   \n",
       "17861   1.19  61.70  56.00 6.78 6.81 4.19      0.00       1.00         0.00   \n",
       "...      ...    ...    ...  ...  ...  ...       ...        ...          ...   \n",
       "48417   0.70  62.40  58.00 5.62 5.67 3.52      0.00       0.00         0.00   \n",
       "22637   2.00  60.30  56.00 8.27 8.16 4.94      0.00       1.00         0.00   \n",
       "42891   0.51  62.80  57.00 5.12 5.10 3.21      0.00       1.00         0.00   \n",
       "38368   0.53  63.80  57.00 5.10 5.12 3.26      1.00       0.00         0.00   \n",
       "14000   1.19  62.70  61.00 6.73 6.66 4.20      0.00       0.00         1.00   \n",
       "\n",
       "       cut_Very Good  ...  color_H  color_I  color_J  clarity_IF  clarity_SI1  \\\n",
       "32301           0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
       "39009           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "22757           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "15129           0.00  ...     1.00     0.00     0.00        0.00         0.00   \n",
       "17861           0.00  ...     0.00     1.00     0.00        1.00         0.00   \n",
       "...              ...  ...      ...      ...      ...         ...          ...   \n",
       "48417           1.00  ...     0.00     1.00     0.00        0.00         0.00   \n",
       "22637           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "42891           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "38368           0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
       "14000           0.00  ...     1.00     0.00     0.00        0.00         1.00   \n",
       "\n",
       "       clarity_SI2  clarity_VS1  clarity_VS2  clarity_VVS1  clarity_VVS2  \n",
       "32301         0.00         0.00         1.00          0.00          0.00  \n",
       "39009         0.00         0.00         0.00          0.00          1.00  \n",
       "22757         0.00         0.00         0.00          0.00          1.00  \n",
       "15129         0.00         1.00         0.00          0.00          0.00  \n",
       "17861         0.00         0.00         0.00          0.00          0.00  \n",
       "...            ...          ...          ...           ...           ...  \n",
       "48417         0.00         1.00         0.00          0.00          0.00  \n",
       "22637         0.00         0.00         0.00          0.00          0.00  \n",
       "42891         1.00         0.00         0.00          0.00          0.00  \n",
       "38368         0.00         0.00         1.00          0.00          0.00  \n",
       "14000         0.00         0.00         0.00          0.00          0.00  \n",
       "\n",
       "[40455 rows x 23 columns]"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>cut_Good</th>\n",
       "      <th>cut_Ideal</th>\n",
       "      <th>cut_Premium</th>\n",
       "      <th>cut_Very Good</th>\n",
       "      <th>...</th>\n",
       "      <th>color_H</th>\n",
       "      <th>color_I</th>\n",
       "      <th>color_J</th>\n",
       "      <th>clarity_IF</th>\n",
       "      <th>clarity_SI1</th>\n",
       "      <th>clarity_SI2</th>\n",
       "      <th>clarity_VS1</th>\n",
       "      <th>clarity_VS2</th>\n",
       "      <th>clarity_VVS1</th>\n",
       "      <th>clarity_VVS2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>0.51</td>\n",
       "      <td>61.40</td>\n",
       "      <td>58.00</td>\n",
       "      <td>5.13</td>\n",
       "      <td>5.09</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22963</th>\n",
       "      <td>2.01</td>\n",
       "      <td>62.90</td>\n",
       "      <td>54.00</td>\n",
       "      <td>8.06</td>\n",
       "      <td>7.93</td>\n",
       "      <td>5.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9078</th>\n",
       "      <td>1.08</td>\n",
       "      <td>62.10</td>\n",
       "      <td>59.00</td>\n",
       "      <td>6.57</td>\n",
       "      <td>6.53</td>\n",
       "      <td>4.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26148</th>\n",
       "      <td>2.13</td>\n",
       "      <td>61.50</td>\n",
       "      <td>57.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>8.34</td>\n",
       "      <td>5.11</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29451</th>\n",
       "      <td>0.33</td>\n",
       "      <td>61.90</td>\n",
       "      <td>56.00</td>\n",
       "      <td>4.46</td>\n",
       "      <td>4.49</td>\n",
       "      <td>2.77</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8884</th>\n",
       "      <td>1.04</td>\n",
       "      <td>62.40</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.40</td>\n",
       "      <td>6.48</td>\n",
       "      <td>4.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34947</th>\n",
       "      <td>0.30</td>\n",
       "      <td>61.90</td>\n",
       "      <td>60.00</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.29</td>\n",
       "      <td>2.65</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21821</th>\n",
       "      <td>1.50</td>\n",
       "      <td>60.20</td>\n",
       "      <td>61.00</td>\n",
       "      <td>7.27</td>\n",
       "      <td>7.32</td>\n",
       "      <td>4.39</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9942</th>\n",
       "      <td>1.01</td>\n",
       "      <td>61.10</td>\n",
       "      <td>56.00</td>\n",
       "      <td>6.44</td>\n",
       "      <td>6.48</td>\n",
       "      <td>3.95</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8296</th>\n",
       "      <td>1.13</td>\n",
       "      <td>61.70</td>\n",
       "      <td>57.00</td>\n",
       "      <td>6.70</td>\n",
       "      <td>6.59</td>\n",
       "      <td>4.13</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13485 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat  depth  table    x    y    z  cut_Good  cut_Ideal  cut_Premium  \\\n",
       "44751   0.51  61.40  58.00 5.13 5.09 3.14      0.00       0.00         1.00   \n",
       "22963   2.01  62.90  54.00 8.06 7.93 5.05      0.00       1.00         0.00   \n",
       "9078    1.08  62.10  59.00 6.57 6.53 4.07      0.00       1.00         0.00   \n",
       "26148   2.13  61.50  57.00 8.27 8.34 5.11      0.00       0.00         0.00   \n",
       "29451   0.33  61.90  56.00 4.46 4.49 2.77      0.00       1.00         0.00   \n",
       "...      ...    ...    ...  ...  ...  ...       ...        ...          ...   \n",
       "8884    1.04  62.40  56.00 6.40 6.48 4.02      0.00       1.00         0.00   \n",
       "34947   0.30  61.90  60.00 4.27 4.29 2.65      0.00       0.00         1.00   \n",
       "21821   1.50  60.20  61.00 7.27 7.32 4.39      1.00       0.00         0.00   \n",
       "9942    1.01  61.10  56.00 6.44 6.48 3.95      0.00       1.00         0.00   \n",
       "8296    1.13  61.70  57.00 6.70 6.59 4.13      0.00       1.00         0.00   \n",
       "\n",
       "       cut_Very Good  ...  color_H  color_I  color_J  clarity_IF  clarity_SI1  \\\n",
       "44751           0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "22963           0.00  ...     0.00     0.00     1.00        0.00         0.00   \n",
       "9078            0.00  ...     0.00     1.00     0.00        0.00         1.00   \n",
       "26148           1.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "29451           0.00  ...     0.00     0.00     0.00        0.00         1.00   \n",
       "...              ...  ...      ...      ...      ...         ...          ...   \n",
       "8884            0.00  ...     0.00     0.00     0.00        0.00         0.00   \n",
       "34947           0.00  ...     1.00     0.00     0.00        0.00         0.00   \n",
       "21821           0.00  ...     0.00     0.00     0.00        0.00         1.00   \n",
       "9942            0.00  ...     1.00     0.00     0.00        0.00         0.00   \n",
       "8296            0.00  ...     0.00     1.00     0.00        0.00         0.00   \n",
       "\n",
       "       clarity_SI2  clarity_VS1  clarity_VS2  clarity_VVS1  clarity_VVS2  \n",
       "44751         0.00         0.00         1.00          0.00          0.00  \n",
       "22963         1.00         0.00         0.00          0.00          0.00  \n",
       "9078          0.00         0.00         0.00          0.00          0.00  \n",
       "26148         1.00         0.00         0.00          0.00          0.00  \n",
       "29451         0.00         0.00         0.00          0.00          0.00  \n",
       "...            ...          ...          ...           ...           ...  \n",
       "8884          1.00         0.00         0.00          0.00          0.00  \n",
       "34947         1.00         0.00         0.00          0.00          0.00  \n",
       "21821         0.00         0.00         0.00          0.00          0.00  \n",
       "9942          1.00         0.00         0.00          0.00          0.00  \n",
       "8296          1.00         0.00         0.00          0.00          0.00  \n",
       "\n",
       "[13485 rows x 23 columns]"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "32301      454\n",
       "39009     1056\n",
       "22757    10773\n",
       "15129     6082\n",
       "17861     7207\n",
       "         ...  \n",
       "48417     1971\n",
       "22637    10685\n",
       "42891     1359\n",
       "38368     1023\n",
       "14000     5698\n",
       "Name: price, Length: 40455, dtype: int64"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "44751     1619\n",
       "22963    11011\n",
       "9078      4521\n",
       "26148    15454\n",
       "29451      702\n",
       "         ...  \n",
       "8884      4486\n",
       "34947      378\n",
       "21821     9892\n",
       "9942      4693\n",
       "8296      4385\n",
       "Name: price, Length: 13485, dtype: int64"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# X_train, X_test, y_train, y_test = train_test_split(subset_data.drop(columns = ['SalePrice']), subset_data['SalePrice'], test_size=0.25)\n",
    "X_train_quant, X_test_quant, y_train_quant, y_test_quant = train_test_split(final_df.drop(columns = ['price']), final_df['price'], test_size=0.25, random_state=50)\n",
    "\n",
    "X_train_quant\n",
    "X_test_quant\n",
    "y_train_quant\n",
    "y_test_quant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "98f5ab34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: statsmodels==0.14 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (0.14.0)\n",
      "Requirement already satisfied: numpy>=1.18 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from statsmodels==0.14) (1.26.0)\n",
      "Requirement already satisfied: scipy!=1.9.2,>=1.4 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from statsmodels==0.14) (1.11.3)\n",
      "Requirement already satisfied: pandas>=1.0 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from statsmodels==0.14) (2.1.2)\n",
      "Requirement already satisfied: patsy>=0.5.2 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from statsmodels==0.14) (0.5.6)\n",
      "Requirement already satisfied: packaging>=21.3 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from statsmodels==0.14) (23.2)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pandas>=1.0->statsmodels==0.14) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pandas>=1.0->statsmodels==0.14) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from pandas>=1.0->statsmodels==0.14) (2023.3)\n",
      "Requirement already satisfied: six in /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (from patsy>=0.5.2->statsmodels==0.14) (1.16.0)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.3.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install statsmodels==0.14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "f9c9ce14",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "d17767e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/statsmodels/regression/quantile_regression.py:191: IterationLimitWarning:\n",
      "\n",
      "Maximum number of iterations (1000) reached.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "formula = \"price ~ carat + depth + table + x + y + z + Q('cut_Good') + Q('cut_Ideal') + Q('cut_Premium') + Q('cut_Very Good') + color_E + color_F + color_G + color_H + color_I + color_J + clarity_IF + clarity_SI1 + clarity_SI2 + clarity_VS1 + clarity_VS2 + clarity_VVS1 + clarity_VVS2\"\n",
    "\n",
    "mod = smf.quantreg(formula, data=final_df)\n",
    "res = mod.fit(q=0.5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d6a4856",
   "metadata": {},
   "source": [
    "* The mean absolute error comes to be **641.20** which is definitely an improvement than all the other models. \n",
    "* The median's lower sensitivity to outliers, compared to the mean, contributes to a more resilient model that more accurately reflects the data's central tendency, thereby decreasing the Mean Absolute Error (MAE)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "b604ff60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 641.2080806366415\n",
      "Fraction of MAE to Average Price: 0.16318942929888697\n",
      "       Predicted Price (Quantile Regression)  Actual Price\n",
      "44751                               1,683.96          1619\n",
      "22963                              12,710.09         11011\n",
      "9078                                5,087.40          4521\n",
      "26148                              15,094.56         15454\n",
      "29451                                 433.17           702\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "# Get the quantile regression parameters\n",
    "params = res.params\n",
    "\n",
    "# Predict the target variable on the test data using the quantile regression parameters\n",
    "y_test_pred_quantile = res.predict(X_test_quant)\n",
    "\n",
    "# Create a DataFrame with predictions and actual prices\n",
    "predictions_df = pd.DataFrame({'Predicted Price (Quantile Regression)': y_test_pred_quantile, 'Actual Price': y_test_quant})\n",
    "\n",
    "# Calculate Mean Absolute Error (MAE)\n",
    "mae = mean_absolute_error(y_test_quant, y_test_pred_quantile)\n",
    "\n",
    "# Calculate fraction of MAE to the average price in the test set\n",
    "average_price_test = y_test.mean()\n",
    "mae_fraction = mae / average_price_test\n",
    "\n",
    "# Display MAE and fraction of MAE to average price\n",
    "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
    "print(f\"Fraction of MAE to Average Price: {mae_fraction}\")\n",
    "\n",
    "# Display the predictions DataFrame\n",
    "print(predictions_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a503a00-21cf-4afc-a92e-cd3d4cc8489e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
